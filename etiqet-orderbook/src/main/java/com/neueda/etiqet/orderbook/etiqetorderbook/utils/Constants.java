package com.neueda.etiqet.orderbook.etiqetorderbook.utils;

import com.neueda.etiqet.orderbook.etiqetorderbook.entity.Tag;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.security.Timestamp;
import java.time.LocalDateTime;
import java.util.*;

import static com.neueda.etiqet.orderbook.etiqetorderbook.utils.Utils.getConfig;

public class Constants {
    public static final Logger orderBookLogger = LoggerFactory.getLogger("ORDER BOOK");

    public static final char SOH = '\u0001';
    public static final char VERTICAL_BAR = '\u007C';
    public static final String OUT = "[>>OUT>>]";
    public static final String IN = "[<<<.IN<<]";
    public static final HashMap<String,String> hmMsgType;
    public static final HashMap<String,String> hmOrdStatus;
    public static final HashMap<String,String> hmExecType;
//    public static final HashMap<String,String> hmTags;
    public static final HashMap<String,String> hmFixVersions;
    public static final HashMap<Integer,String> hmTagValue;
    public static final String EXECUTION_REPORT = "8";
    public static final String NEW = "0000";
    public static final String NONE = "NONE";

    public static final String CONF_BEGIN_STRING = "BeginString";
    public static final String CONF_SENDER = "SenderCompID";
    public static final String CONF_TARGET = "TargetCompID";
    public static final String CONF_CONNECTION_TYPE = "ConnectionType";
    public static final String CONF_RECONNECT_INTERVAL = "ReconnectInterval";
    public static final String CONF_FILE_STORE_PATH = "FileStorePath";
    public static final String CONF_FILE_LOG_PATH= "FileLogPath";
    public static final String CONF_START_TIME = "StartTime";
    public static final String CONF_END_TIME = "EndTime";
    public static final String CONF_USE_DATA_DIC = "UseDataDictionary";
    public static final String CONF_DATA_DIC = "DataDictionary";
    public static final String CONF_RESET_ON_LOGON = "ResetOnLogon";
    public static final String CONF_RESET_ON_LOGOUT = "ResetOnLogout";
    public static final String CONF_RESET_ON_DISCONNECT = "ResetOnDisconnect";
    public static final String CONF_HEART_BT_INT= "HeartBtInt";
    public static final String INI_CONNECT_HOST = "SocketConnectHost";
    public static final String INI_CONNECT_PORT= "SocketConnectPort";
    public static final String ACC_ACCEPT_PORT = "SocketAcceptPort";
    public static final String ACC_SOCKET_ACCEPT_PORT_RANGE_LIMIT = "PortRangeLimit";

    public static final String ACCEPTOR_PORT_DIALOG_TITLE = "ACCEPTOR PORT";
    public static final String ACCEPTOR_PORT_DIALOG_HEADER = "Introduce port to listen on";
    public static final String ACCEPTOR_PORT_DIALOG_TEXT = "Port:";
    public static final String ACCEPTOR_ROLE = "ACCEPTOR";
    public static final String INITIATOR_ROLE = "INITIATOR";
    public static final String CLIENT_CFG = "client.cfg";
    public static final String SERVER_CFG = "server.cfg";
    public static final String INITIATOR_PORT_DIALOG_TITLE = "INITIATOR PORT";
    public static final String INITIATOR_PORT_DIALOG_HEADER = "Introduce port to connect";
    public static final String INITIATOR_PORT_DIALOG_TEXT = "Port:";
    public static final String SET_DEFAULT_PORT = "Set default port: ";
    public static final String COMBO_NEW_ORDER = "NEW ORDER";
    public static final String COMBO_CANCEL = "CANCEL";
    public static final String COMBO_REPLACE = "REPLACE";

    public static final String MSG_TYPE = "35";
    public static final String PORTS_RANGE_ERROR = "PORTS RANGE ERROR";
    public static final String BAD_PORTS_RANGE = "Bad ports range";
    public static final String PORTS_IN_USE = "Ports in use";
    public static final String LISTENING_ON_PORTS = "Listening on ports: %s";
    public static final String INVALID_PORTS = "Invalid ports: ";
    public static final String HELP_SITE = "https://btobits.com/fixopaedia/fixdic44/fields_by_tag_.html";
    public static final List<String> Y_N = Arrays.asList("Y", "N");
    public static final String FIX_4_0 = "FIX.4.0";
    public static final String FIX_4_1 = "FIX.4.1";
    public static final String FIX_4_2 = "FIX.4.2";
    public static final String FIX_4_3 = "FIX.4.3";
    public static final String FIX_4_4 = "FIX.4.4";
    public static final String FIX_5_0 = "FIX.5.0";
    public static final String FIX40 = "40";
    public static final String FIX41 = "41";
    public static final String FIX42 = "42";
    public static final String FIX43 = "43";
    public static final String FIX44 = "44";
    public static final String FIX50 = "50";
    public static final List<String> FIX_VERSIONS = Arrays.asList(FIX_4_0, FIX_4_1, FIX_4_2, FIX_4_3, FIX_4_4, FIX_5_0);
    public static final List<String> FIX_VERSIONS_COMBO = Arrays.asList(FIX40, FIX41, FIX42, FIX43, FIX44, FIX50);
    public static final String Y = "Y";
    public static final String N = "N";
    public static final String SRC_MAIN_RESOURCES_SERVER_CFG = "src/main/resources/server.cfg";
    public static final String SRC_MAIN_RESOURCES_CLIENT_CFG = "src/main/resources/client.cfg";
    public static final String INITIATOR_TITLE = "Initiator configuration";
    public static final String ACCEPTOR_TITLE = "Acceptor configuration";
    public static final String ADVANCED_REQUEST_TITLE = "Advanced request";
    public static final List<Tag> defaultTags;
    public static final String KEY_BEGIN_STRING = "8";
    public static final String KEY_BODY_LENGTH = "9";
    public static final String KEY_MSG_TYPE = "35";
    public static final String KEY_CHECKSUM = "10";
    public static final String TAGS_MUST_BE_NUMERIC_AND_VALID_FIX_PROTOCOL_KEYS = "Tags must be numeric and valid FIX protocol keys";

    //hmTagValue
    static{
        hmTagValue = new HashMap<>();
        hmTagValue.put(1,"Account");
        hmTagValue.put(2,"AdvId");
        hmTagValue.put(3,"AdvRefID");
        hmTagValue.put(4,"AdvSide");
        hmTagValue.put(5,"AdvTransType");
        hmTagValue.put(6,"AvgPx");
        hmTagValue.put(7,"BeginSeqNo");
        hmTagValue.put(8,"BeginString");
        hmTagValue.put(9,"BodyLength");
        hmTagValue.put(10,"CheckSum");
        hmTagValue.put(11,"ClOrdID");
        hmTagValue.put(12,"Commission");
        hmTagValue.put(13,"CommType");
        hmTagValue.put(14,"CumQty");
        hmTagValue.put(15,"Currency");
        hmTagValue.put(16,"EndSeqNo");
        hmTagValue.put(17,"ExecID");
        hmTagValue.put(18,"ExecInst");
        hmTagValue.put(19,"ExecRefID");
        hmTagValue.put(20,"ExecTransType (replaced)");
        hmTagValue.put(21,"HandlInst");
        hmTagValue.put(22,"SecurityIDSource");
        hmTagValue.put(23,"IOIID");
        hmTagValue.put(24,"IOIOthSvc (no longer used)");
        hmTagValue.put(25,"IOIQltyInd");
        hmTagValue.put(26,"IOIRefID");
        hmTagValue.put(27,"IOIQty");
        hmTagValue.put(28,"IOITransType");
        hmTagValue.put(29,"LastCapacity");
        hmTagValue.put(30,"LastMkt");
        hmTagValue.put(31,"LastPx");
        hmTagValue.put(32,"LastQty");
        hmTagValue.put(33,"NoLinesOfText");
        hmTagValue.put(34,"MsgSeqNum");
        hmTagValue.put(35,"MsgType");
        hmTagValue.put(36,"NewSeqNo");
        hmTagValue.put(37,"OrderID");
        hmTagValue.put(38,"OrderQty");
        hmTagValue.put(39,"OrdStatus");
        hmTagValue.put(40,"OrdType");
        hmTagValue.put(41,"OrigClOrdID");
        hmTagValue.put(42,"OrigTime");
        hmTagValue.put(43,"PossDupFlag");
        hmTagValue.put(44,"Price");
        hmTagValue.put(45,"RefSeqNum");
        hmTagValue.put(46,"RelatdSym (no longer used)");
        hmTagValue.put(47,"Rule80A(No Longer Used)");
        hmTagValue.put(48,"SecurityID");
        hmTagValue.put(49,"SenderCompID");
        hmTagValue.put(50,"SenderSubID");
        hmTagValue.put(51,"SendingDate (no longer used)");
        hmTagValue.put(52,"SendingTime");
        hmTagValue.put(53,"Quantity");
        hmTagValue.put(54,"Side");
        hmTagValue.put(55,"Symbol");
        hmTagValue.put(56,"TargetCompID");
        hmTagValue.put(57,"TargetSubID");
        hmTagValue.put(58,"Text");
        hmTagValue.put(59,"TimeInForce");
        hmTagValue.put(60,"TransactTime");
        hmTagValue.put(61,"Urgency");
        hmTagValue.put(62,"ValidUntilTime");
        hmTagValue.put(63,"SettlType");
        hmTagValue.put(64,"SettlDate");
        hmTagValue.put(65,"SymbolSfx");
        hmTagValue.put(66,"ListID");
        hmTagValue.put(67,"ListSeqNo");
        hmTagValue.put(68,"TotNoOrders");
        hmTagValue.put(69,"ListExecInst");
        hmTagValue.put(70,"AllocID");
        hmTagValue.put(71,"AllocTransType");
        hmTagValue.put(72,"RefAllocID");
        hmTagValue.put(73,"NoOrders");
        hmTagValue.put(74,"AvgPxPrecision");
        hmTagValue.put(75,"TradeDate");
        hmTagValue.put(76,"ExecBroker (replaced)");
        hmTagValue.put(77,"PositionEffect");
        hmTagValue.put(78,"NoAllocs");
        hmTagValue.put(79,"AllocAccount");
        hmTagValue.put(80,"AllocQty");
        hmTagValue.put(81,"ProcessCode");
        hmTagValue.put(82,"NoRpts");
        hmTagValue.put(83,"RptSeq");
        hmTagValue.put(84,"CxlQty");
        hmTagValue.put(85,"NoDlvyInst");
        hmTagValue.put(86,"DlvyInst (no longer used)");
        hmTagValue.put(87,"AllocStatus");
        hmTagValue.put(88,"AllocRejCode");
        hmTagValue.put(89,"Signature");
        hmTagValue.put(90,"SecureDataLen");
        hmTagValue.put(91,"SecureData");
        hmTagValue.put(92,"BrokerOfCredit (replaced)");
        hmTagValue.put(93,"SignatureLength");
        hmTagValue.put(94,"EmailType");
        hmTagValue.put(95,"RawDataLength");
        hmTagValue.put(96,"RawData");
        hmTagValue.put(97,"PossResend");
        hmTagValue.put(98,"EncryptMethod");
        hmTagValue.put(99,"StopPx");
        hmTagValue.put(100,"ExDestination");
        hmTagValue.put(102,"CxlRejReason");
        hmTagValue.put(103,"OrdRejReason");
        hmTagValue.put(104,"IOIQualifier");
        hmTagValue.put(105,"WaveNo (no longer used)");
        hmTagValue.put(106,"Issuer");
        hmTagValue.put(107,"SecurityDesc");
        hmTagValue.put(108,"HeartBtInt");
        hmTagValue.put(109,"ClientID (replaced)");
        hmTagValue.put(110,"MinQty");
        hmTagValue.put(111,"MaxFloor");
        hmTagValue.put(112,"TestReqID");
        hmTagValue.put(113,"ReportToExch");
        hmTagValue.put(114,"LocateReqd");
        hmTagValue.put(115,"OnBehalfOfCompID");
        hmTagValue.put(116,"OnBehalfOfSubID");
        hmTagValue.put(117,"QuoteID");
        hmTagValue.put(118,"NetMoney");
        hmTagValue.put(119,"SettlCurrAmt");
        hmTagValue.put(120,"SettlCurrency");
        hmTagValue.put(121,"ForexReq");
        hmTagValue.put(122,"OrigSendingTime");
        hmTagValue.put(123,"GapFillFlag");
        hmTagValue.put(124,"NoExecs");
        hmTagValue.put(125,"CxlType (no longer used)");
        hmTagValue.put(126,"ExpireTime");
        hmTagValue.put(127,"DKReason");
        hmTagValue.put(128,"DeliverToCompID");
        hmTagValue.put(129,"DeliverToSubID");
        hmTagValue.put(130,"IOINaturalFlag");
        hmTagValue.put(131,"QuoteReqID");
        hmTagValue.put(132,"BidPx");
        hmTagValue.put(133,"OfferPx");
        hmTagValue.put(134,"BidSize");
        hmTagValue.put(135,"OfferSize");
        hmTagValue.put(136,"NoMiscFees");
        hmTagValue.put(137,"MiscFeeAmt");
        hmTagValue.put(138,"MiscFeeCurr");
        hmTagValue.put(139,"MiscFeeType");
        hmTagValue.put(140,"PrevClosePx");
        hmTagValue.put(141,"ResetSeqNumFlag");
        hmTagValue.put(142,"SenderLocationID");
        hmTagValue.put(143,"TargetLocationID");
        hmTagValue.put(144,"OnBehalfOfLocationID");
        hmTagValue.put(145,"DeliverToLocationID");
        hmTagValue.put(146,"NoRelatedSym");
        hmTagValue.put(147,"Subject");
        hmTagValue.put(148,"Headline");
        hmTagValue.put(149,"URLLink");
        hmTagValue.put(150,"ExecType");
        hmTagValue.put(151,"LeavesQty");
        hmTagValue.put(152,"CashOrderQty");
        hmTagValue.put(153,"AllocAvgPx");
        hmTagValue.put(154,"AllocNetMoney");
        hmTagValue.put(155,"SettlCurrFxRate");
        hmTagValue.put(156,"SettlCurrFxRateCalc");
        hmTagValue.put(157,"NumDaysInterest");
        hmTagValue.put(158,"AccruedInterestRate");
        hmTagValue.put(159,"AccruedInterestAmt");
        hmTagValue.put(160,"SettlInstMode");
        hmTagValue.put(161,"AllocText");
        hmTagValue.put(162,"SettlInstID");
        hmTagValue.put(163,"SettlInstTransType");
        hmTagValue.put(164,"EmailThreadID");
        hmTagValue.put(165,"SettlInstSource");
        hmTagValue.put(166,"SettlLocation (replaced)");
        hmTagValue.put(167,"SecurityType");
        hmTagValue.put(168,"EffectiveTime");
        hmTagValue.put(169,"StandInstDbType");
        hmTagValue.put(170,"StandInstDbName");
        hmTagValue.put(171,"StandInstDbID");
        hmTagValue.put(172,"SettlDeliveryType");
        hmTagValue.put(173,"SettlDepositoryCode (replaced)");
        hmTagValue.put(174,"SettlBrkrCode (replaced)");
        hmTagValue.put(175,"SettlInstCode (replaced)");
        hmTagValue.put(176,"SecuritySettlAgentName (replaced)");
        hmTagValue.put(177,"SecuritySettlAgentCode (replaced)");
        hmTagValue.put(178,"SecuritySettlAgentAcctNum (replaced)");
        hmTagValue.put(179,"SecuritySettlAgentAcctName (replaced)");
        hmTagValue.put(180,"SecuritySettlAgentContactName (replaced)");
        hmTagValue.put(181,"SecuritySettlAgentContactPhone (replaced)");
        hmTagValue.put(182,"CashSettlAgentName (replaced)");
        hmTagValue.put(183,"CashSettlAgentCode (replaced)");
        hmTagValue.put(184,"CashSettlAgentAcctNum (replaced)");
        hmTagValue.put(185,"CashSettlAgentAcctName (replaced)");
        hmTagValue.put(186,"CashSettlAgentContactName (replaced)");
        hmTagValue.put(187,"CashSettlAgentContactPhone (replaced)");
        hmTagValue.put(188,"BidSpotRate");
        hmTagValue.put(189,"BidForwardPoints");
        hmTagValue.put(190,"OfferSpotRate");
        hmTagValue.put(191,"OfferForwardPoints");
        hmTagValue.put(192,"OrderQty2");
        hmTagValue.put(193,"SettlDate2");
        hmTagValue.put(194,"LastSpotRate");
        hmTagValue.put(195,"LastForwardPoints");
        hmTagValue.put(196,"AllocLinkID");
        hmTagValue.put(197,"AllocLinkType");
        hmTagValue.put(198,"SecondaryOrderID");
        hmTagValue.put(199,"NoIOIQualifiers");
        hmTagValue.put(200,"MaturityMonthYear");
        hmTagValue.put(201,"PutOrCall (replaced)");
        hmTagValue.put(202,"StrikePrice");
        hmTagValue.put(203,"CoveredOrUncovered");
        hmTagValue.put(204,"CustomerOrFirm (replaced)");
        hmTagValue.put(205,"MaturityDay (replaced)");
        hmTagValue.put(206,"OptAttribute");
        hmTagValue.put(207,"SecurityExchange");
        hmTagValue.put(208,"NotifyBrokerOfCredit");
        hmTagValue.put(209,"AllocHandlInst");
        hmTagValue.put(210,"MaxShow");
        hmTagValue.put(211,"PegOffsetValue");
        hmTagValue.put(212,"XmlDataLen");
        hmTagValue.put(213,"XmlData");
        hmTagValue.put(214,"SettlInstRefID");
        hmTagValue.put(215,"NoRoutingIDs");
        hmTagValue.put(216,"RoutingType");
        hmTagValue.put(217,"RoutingID");
        hmTagValue.put(218,"Spread");
        hmTagValue.put(219,"Benchmark (no longer used)");
        hmTagValue.put(220,"BenchmarkCurveCurrency");
        hmTagValue.put(221,"BenchmarkCurveName");
        hmTagValue.put(222,"BenchmarkCurvePoint");
        hmTagValue.put(223,"CouponRate");
        hmTagValue.put(224,"CouponPaymentDate");
        hmTagValue.put(225,"IssueDate");
        hmTagValue.put(226,"RepurchaseTerm (Deprecated)");
        hmTagValue.put(227,"RepurchaseRate (Deprecated)");
        hmTagValue.put(228,"Factor");
        hmTagValue.put(229,"TradeOriginationDate");
        hmTagValue.put(230,"ExDate");
        hmTagValue.put(231,"ContractMultiplier");
        hmTagValue.put(232,"NoStipulations");
        hmTagValue.put(233,"StipulationType");
        hmTagValue.put(234,"StipulationValue");
        hmTagValue.put(235,"YieldType");
        hmTagValue.put(236,"Yield");
        hmTagValue.put(237,"TotalTakedown");
        hmTagValue.put(238,"Concession");
        hmTagValue.put(239,"RepoCollateralSecurityType (Deprecated)");
        hmTagValue.put(240,"RedemptionDate (Deprecated)");
        hmTagValue.put(241,"UnderlyingCouponPaymentDate");
        hmTagValue.put(242,"UnderlyingIssueDate");
        hmTagValue.put(243,"UnderlyingRepoCollateralSecurityType (Deprecated)");
        hmTagValue.put(244,"UnderlyingRepurchaseTerm (Deprecated)");
        hmTagValue.put(245,"UnderlyingRepurchaseRate (Deprecated)");
        hmTagValue.put(246,"UnderlyingFactor");
        hmTagValue.put(247,"UnderlyingRedemptionDate (Deprecated)");
        hmTagValue.put(248,"LegCouponPaymentDate");
        hmTagValue.put(249,"LegIssueDate");
        hmTagValue.put(250,"LegRepoCollateralSecurityType (Deprecated)");
        hmTagValue.put(251,"LegRepurchaseTerm (Deprecated)");
        hmTagValue.put(252,"LegRepurchaseRate (Deprecated)");
        hmTagValue.put(253,"LegFactor");
        hmTagValue.put(254,"LegRedemptionDate (Deprecated)");
        hmTagValue.put(255,"CreditRating");
        hmTagValue.put(256,"UnderlyingCreditRating");
        hmTagValue.put(257,"LegCreditRating");
        hmTagValue.put(258,"TradedFlatSwitch");
        hmTagValue.put(259,"BasisFeatureDate");
        hmTagValue.put(260,"BasisFeaturePrice");
        hmTagValue.put(262,"MDReqID");
        hmTagValue.put(263,"SubscriptionRequestType");
        hmTagValue.put(264,"MarketDepth");
        hmTagValue.put(265,"MDUpdateType");
        hmTagValue.put(266,"AggregatedBook");
        hmTagValue.put(267,"NoMDEntryTypes");
        hmTagValue.put(268,"NoMDEntries");
        hmTagValue.put(269,"MDEntryType");
        hmTagValue.put(270,"MDEntryPx");
        hmTagValue.put(271,"MDEntrySize");
        hmTagValue.put(272,"MDEntryDate");
        hmTagValue.put(273,"MDEntryTime");
        hmTagValue.put(274,"TickDirection");
        hmTagValue.put(275,"MDMkt");
        hmTagValue.put(276,"QuoteCondition");
        hmTagValue.put(277,"TradeCondition");
        hmTagValue.put(278,"MDEntryID");
        hmTagValue.put(279,"MDUpdateAction");
        hmTagValue.put(280,"MDEntryRefID");
        hmTagValue.put(281,"MDReqRejReason");
        hmTagValue.put(282,"MDEntryOriginator");
        hmTagValue.put(283,"LocationID");
        hmTagValue.put(284,"DeskID");
        hmTagValue.put(285,"DeleteReason");
        hmTagValue.put(286,"OpenCloseSettlFlag");
        hmTagValue.put(287,"SellerDays");
        hmTagValue.put(288,"MDEntryBuyer");
        hmTagValue.put(289,"MDEntrySeller");
        hmTagValue.put(290,"MDEntryPositionNo");
        hmTagValue.put(291,"FinancialStatus");
        hmTagValue.put(292,"CorporateAction");
        hmTagValue.put(293,"DefBidSize");
        hmTagValue.put(294,"DefOfferSize");
        hmTagValue.put(295,"NoQuoteEntries");
        hmTagValue.put(296,"NoQuoteSets");
        hmTagValue.put(297,"QuoteStatus");
        hmTagValue.put(298,"QuoteCancelType");
        hmTagValue.put(299,"QuoteEntryID");
        hmTagValue.put(300,"QuoteRejectReason");
        hmTagValue.put(301,"QuoteResponseLevel");
        hmTagValue.put(302,"QuoteSetID");
        hmTagValue.put(303,"QuoteRequestType");
        hmTagValue.put(304,"TotNoQuoteEntries");
        hmTagValue.put(305,"UnderlyingSecurityIDSource");
        hmTagValue.put(306,"UnderlyingIssuer");
        hmTagValue.put(307,"UnderlyingSecurityDesc");
        hmTagValue.put(308,"UnderlyingSecurityExchange");
        hmTagValue.put(309,"UnderlyingSecurityID");
        hmTagValue.put(310,"UnderlyingSecurityType");
        hmTagValue.put(311,"UnderlyingSymbol");
        hmTagValue.put(312,"UnderlyingSymbolSfx");
        hmTagValue.put(313,"UnderlyingMaturityMonthYear");
        hmTagValue.put(314,"UnderlyingMaturityDay (replaced)");
        hmTagValue.put(315,"UnderlyingPutOrCall (replaced)");
        hmTagValue.put(316,"UnderlyingStrikePrice");
        hmTagValue.put(317,"UnderlyingOptAttribute");
        hmTagValue.put(318,"UnderlyingCurrency");
        hmTagValue.put(319,"RatioQty (replaced)");
        hmTagValue.put(320,"SecurityReqID");
        hmTagValue.put(321,"SecurityRequestType");
        hmTagValue.put(322,"SecurityResponseID");
        hmTagValue.put(323,"SecurityResponseType");
        hmTagValue.put(324,"SecurityStatusReqID");
        hmTagValue.put(325,"UnsolicitedIndicator");
        hmTagValue.put(326,"SecurityTradingStatus");
        hmTagValue.put(327,"HaltReason");
        hmTagValue.put(328,"InViewOfCommon");
        hmTagValue.put(329,"DueToRelated");
        hmTagValue.put(330,"BuyVolume");
        hmTagValue.put(331,"SellVolume");
        hmTagValue.put(332,"HighPx");
        hmTagValue.put(333,"LowPx");
        hmTagValue.put(334,"Adjustment");
        hmTagValue.put(335,"TradSesReqID");
        hmTagValue.put(336,"TradingSessionID");
        hmTagValue.put(337,"ContraTrader");
        hmTagValue.put(338,"TradSesMethod");
        hmTagValue.put(339,"TradSesMode");
        hmTagValue.put(340,"TradSesStatus");
        hmTagValue.put(341,"TradSesStartTime");
        hmTagValue.put(342,"TradSesOpenTime");
        hmTagValue.put(343,"TradSesPreCloseTime");
        hmTagValue.put(344,"TradSesCloseTime");
        hmTagValue.put(345,"TradSesEndTime");
        hmTagValue.put(346,"NumberOfOrders");
        hmTagValue.put(347,"MessageEncoding");
        hmTagValue.put(348,"EncodedIssuerLen");
        hmTagValue.put(349,"EncodedIssuer");
        hmTagValue.put(350,"EncodedSecurityDescLen");
        hmTagValue.put(351,"EncodedSecurityDesc");
        hmTagValue.put(352,"EncodedListExecInstLen");
        hmTagValue.put(353,"EncodedListExecInst");
        hmTagValue.put(354,"EncodedTextLen");
        hmTagValue.put(355,"EncodedText");
        hmTagValue.put(356,"EncodedSubjectLen");
        hmTagValue.put(357,"EncodedSubject");
        hmTagValue.put(358,"EncodedHeadlineLen");
        hmTagValue.put(359,"EncodedHeadline");
        hmTagValue.put(360,"EncodedAllocTextLen");
        hmTagValue.put(361,"EncodedAllocText");
        hmTagValue.put(362,"EncodedUnderlyingIssuerLen");
        hmTagValue.put(363,"EncodedUnderlyingIssuer");
        hmTagValue.put(364,"EncodedUnderlyingSecurityDescLen");
        hmTagValue.put(365,"EncodedUnderlyingSecurityDesc");
        hmTagValue.put(366,"AllocPrice");
        hmTagValue.put(367,"QuoteSetValidUntilTime");
        hmTagValue.put(368,"QuoteEntryRejectReason");
        hmTagValue.put(369,"LastMsgSeqNumProcessed");
        hmTagValue.put(370,"OnBehalfOfSendingTime (no longer used)");
        hmTagValue.put(371,"RefTagID");
        hmTagValue.put(372,"RefMsgType");
        hmTagValue.put(373,"SessionRejectReason");
        hmTagValue.put(374,"BidRequestTransType");
        hmTagValue.put(375,"ContraBroker");
        hmTagValue.put(376,"ComplianceID");
        hmTagValue.put(377,"SolicitedFlag");
        hmTagValue.put(378,"ExecRestatementReason");
        hmTagValue.put(379,"BusinessRejectRefID");
        hmTagValue.put(380,"BusinessRejectReason");
        hmTagValue.put(381,"GrossTradeAmt");
        hmTagValue.put(382,"NoContraBrokers");
        hmTagValue.put(383,"MaxMessageSize");
        hmTagValue.put(384,"NoMsgTypes");
        hmTagValue.put(385,"MsgDirection");
        hmTagValue.put(386,"NoTradingSessions");
        hmTagValue.put(387,"TotalVolumeTraded");
        hmTagValue.put(388,"DiscretionInst");
        hmTagValue.put(389,"DiscretionOffsetValue");
        hmTagValue.put(390,"BidID");
        hmTagValue.put(391,"ClientBidID");
        hmTagValue.put(392,"ListName");
        hmTagValue.put(393,"TotNoRelatedSym");
        hmTagValue.put(394,"BidType");
        hmTagValue.put(395,"NumTickets");
        hmTagValue.put(396,"SideValue1");
        hmTagValue.put(397,"SideValue2");
        hmTagValue.put(398,"NoBidDescriptors");
        hmTagValue.put(399,"BidDescriptorType");
        hmTagValue.put(400,"BidDescriptor");
        hmTagValue.put(401,"SideValueInd");
        hmTagValue.put(402,"LiquidityPctLow");
        hmTagValue.put(403,"LiquidityPctHigh");
        hmTagValue.put(404,"LiquidityValue");
        hmTagValue.put(405,"EFPTrackingError");
        hmTagValue.put(406,"FairValue");
        hmTagValue.put(407,"OutsideIndexPct");
        hmTagValue.put(408,"ValueOfFutures");
        hmTagValue.put(409,"LiquidityIndType");
        hmTagValue.put(410,"WtAverageLiquidity");
        hmTagValue.put(411,"ExchangeForPhysical");
        hmTagValue.put(412,"OutMainCntryUIndex");
        hmTagValue.put(413,"CrossPercent");
        hmTagValue.put(414,"ProgRptReqs");
        hmTagValue.put(415,"ProgPeriodInterval");
        hmTagValue.put(416,"IncTaxInd");
        hmTagValue.put(417,"NumBidders");
        hmTagValue.put(418,"BidTradeType");
        hmTagValue.put(419,"BasisPxType");
        hmTagValue.put(420,"NoBidComponents");
        hmTagValue.put(421,"Country");
        hmTagValue.put(422,"TotNoStrikes");
        hmTagValue.put(423,"PriceType");
        hmTagValue.put(424,"DayOrderQty");
        hmTagValue.put(425,"DayCumQty");
        hmTagValue.put(426,"DayAvgPx");
        hmTagValue.put(427,"GTBookingInst");
        hmTagValue.put(428,"NoStrikes");
        hmTagValue.put(429,"ListStatusType");
        hmTagValue.put(430,"NetGrossInd");
        hmTagValue.put(431,"ListOrderStatus");
        hmTagValue.put(432,"ExpireDate");
        hmTagValue.put(433,"ListExecInstType");
        hmTagValue.put(434,"CxlRejResponseTo");
        hmTagValue.put(435,"UnderlyingCouponRate");
        hmTagValue.put(436,"UnderlyingContractMultiplier");
        hmTagValue.put(437,"ContraTradeQty");
        hmTagValue.put(438,"ContraTradeTime");
        hmTagValue.put(439,"ClearingFirm (replaced)");
        hmTagValue.put(440,"ClearingAccount (replaced)");
        hmTagValue.put(441,"LiquidityNumSecurities");
        hmTagValue.put(442,"MultiLegReportingType");
        hmTagValue.put(443,"StrikeTime");
        hmTagValue.put(444,"ListStatusText");
        hmTagValue.put(445,"EncodedListStatusTextLen");
        hmTagValue.put(446,"EncodedListStatusText");
        hmTagValue.put(447,"PartyIDSource");
        hmTagValue.put(448,"PartyID");
        hmTagValue.put(449,"TotalVolumeTradedDate (replaced)");
        hmTagValue.put(450,"TotalVolumeTraded Time (replaced)");
        hmTagValue.put(451,"NetChgPrevDay");
        hmTagValue.put(452,"PartyRole");
        hmTagValue.put(453,"NoPartyIDs");
        hmTagValue.put(454,"NoSecurityAltID");
        hmTagValue.put(455,"SecurityAltID");
        hmTagValue.put(456,"SecurityAltIDSource");
        hmTagValue.put(457,"NoUnderlyingSecurityAltID");
        hmTagValue.put(458,"UnderlyingSecurityAltID");
        hmTagValue.put(459,"UnderlyingSecurityAltIDSource");
        hmTagValue.put(460,"Product");
        hmTagValue.put(461,"CFICode");
        hmTagValue.put(462,"UnderlyingProduct");
        hmTagValue.put(463,"UnderlyingCFICode");
        hmTagValue.put(464,"TestMessageIndicator");
        hmTagValue.put(465,"QuantityType (Deprecated)");
        hmTagValue.put(466,"BookingRefID");
        hmTagValue.put(467,"IndividualAllocID");
        hmTagValue.put(468,"RoundingDirection");
        hmTagValue.put(469,"RoundingModulus");
        hmTagValue.put(470,"CountryOfIssue");
        hmTagValue.put(471,"StateOrProvinceOfIssue");
        hmTagValue.put(472,"LocaleOfIssue");
        hmTagValue.put(473,"NoRegistDtls");
        hmTagValue.put(474,"MailingDtls");
        hmTagValue.put(475,"InvestorCountryOfResidence");
        hmTagValue.put(476,"PaymentRef");
        hmTagValue.put(477,"DistribPaymentMethod");
        hmTagValue.put(478,"CashDistribCurr");
        hmTagValue.put(479,"CommCurrency");
        hmTagValue.put(480,"CancellationRights");
        hmTagValue.put(481,"MoneyLaunderingStatus");
        hmTagValue.put(482,"MailingInst");
        hmTagValue.put(483,"TransBkdTime");
        hmTagValue.put(484,"ExecPriceType");
        hmTagValue.put(485,"ExecPriceAdjustment");
        hmTagValue.put(486,"DateOfBirth");
        hmTagValue.put(487,"TradeReportTransType");
        hmTagValue.put(488,"CardHolderName");
        hmTagValue.put(489,"CardNumber");
        hmTagValue.put(490,"CardExpDate");
        hmTagValue.put(491,"CardIssNum");
        hmTagValue.put(492,"PaymentMethod");
        hmTagValue.put(493,"RegistAcctType");
        hmTagValue.put(494,"Designation");
        hmTagValue.put(495,"TaxAdvantageType");
        hmTagValue.put(496,"RegistRejReasonText");
        hmTagValue.put(497,"FundRenewWaiv");
        hmTagValue.put(498,"CashDistribAgentName");
        hmTagValue.put(499,"CashDistribAgentCode");
        hmTagValue.put(500,"CashDistribAgentAcctNumber");
        hmTagValue.put(501,"CashDistribPayRef");
        hmTagValue.put(502,"CashDistribAgentAcctName");
        hmTagValue.put(503,"CardStartDate");
        hmTagValue.put(504,"PaymentDate");
        hmTagValue.put(505,"PaymentRemitterID");
        hmTagValue.put(506,"RegistStatus");
        hmTagValue.put(507,"RegistRejReasonCode");
        hmTagValue.put(508,"RegistRefID");
        hmTagValue.put(509,"RegistDtls");
        hmTagValue.put(510,"NoDistribInsts");
        hmTagValue.put(511,"RegistEmail");
        hmTagValue.put(512,"DistribPercentage");
        hmTagValue.put(513,"RegistID");
        hmTagValue.put(514,"RegistTransType");
        hmTagValue.put(515,"ExecValuationPoint");
        hmTagValue.put(516,"OrderPercent");
        hmTagValue.put(517,"OwnershipType");
        hmTagValue.put(518,"NoContAmts");
        hmTagValue.put(519,"ContAmtType");
        hmTagValue.put(520,"ContAmtValue");
        hmTagValue.put(521,"ContAmtCurr");
        hmTagValue.put(522,"OwnerType");
        hmTagValue.put(523,"PartySubID");
        hmTagValue.put(524,"NestedPartyID");
        hmTagValue.put(525,"NestedPartyIDSource");
        hmTagValue.put(526,"SecondaryClOrdID");
        hmTagValue.put(527,"SecondaryExecID");
        hmTagValue.put(528,"OrderCapacity");
        hmTagValue.put(529,"OrderRestrictions");
        hmTagValue.put(530,"MassCancelRequestType");
        hmTagValue.put(531,"MassCancelResponse");
        hmTagValue.put(532,"MassCancelRejectReason");
        hmTagValue.put(533,"TotalAffectedOrders");
        hmTagValue.put(534,"NoAffectedOrders");
        hmTagValue.put(535,"AffectedOrderID");
        hmTagValue.put(536,"AffectedSecondaryOrderID");
        hmTagValue.put(537,"QuoteType");
        hmTagValue.put(538,"NestedPartyRole");
        hmTagValue.put(539,"NoNestedPartyIDs");
        hmTagValue.put(540,"TotalAccruedInterestAmt (Deprecated)");
        hmTagValue.put(541,"MaturityDate");
        hmTagValue.put(542,"UnderlyingMaturityDate");
        hmTagValue.put(543,"InstrRegistry");
        hmTagValue.put(544,"CashMargin");
        hmTagValue.put(545,"NestedPartySubID");
        hmTagValue.put(546,"Scope");
        hmTagValue.put(547,"MDImplicitDelete");
        hmTagValue.put(548,"CrossID");
        hmTagValue.put(549,"CrossType");
        hmTagValue.put(550,"CrossPrioritization");
        hmTagValue.put(551,"OrigCrossID");
        hmTagValue.put(552,"NoSides");
        hmTagValue.put(553,"Username");
        hmTagValue.put(554,"Password");
        hmTagValue.put(555,"NoLegs");
        hmTagValue.put(556,"LegCurrency");
        hmTagValue.put(557,"TotNoSecurityTypes");
        hmTagValue.put(558,"NoSecurityTypes");
        hmTagValue.put(559,"SecurityListRequestType");
        hmTagValue.put(560,"SecurityRequestResult");
        hmTagValue.put(561,"RoundLot");
        hmTagValue.put(562,"MinTradeVol");
        hmTagValue.put(563,"MultiLegRptTypeReq");
        hmTagValue.put(564,"LegPositionEffect");
        hmTagValue.put(565,"LegCoveredOrUncovered");
        hmTagValue.put(566,"LegPrice");
        hmTagValue.put(567,"TradSesStatusRejReason");
        hmTagValue.put(568,"TradeRequestID");
        hmTagValue.put(569,"TradeRequestType");
        hmTagValue.put(570,"PreviouslyReported");
        hmTagValue.put(571,"TradeReportID");
        hmTagValue.put(572,"TradeReportRefID");
        hmTagValue.put(573,"MatchStatus");
        hmTagValue.put(574,"MatchType");
        hmTagValue.put(575,"OddLot");
        hmTagValue.put(576,"NoClearingInstructions");
        hmTagValue.put(577,"ClearingInstruction");
        hmTagValue.put(578,"TradeInputSource");
        hmTagValue.put(579,"TradeInputDevice");
        hmTagValue.put(580,"NoDates");
        hmTagValue.put(581,"AccountType");
        hmTagValue.put(582,"CustOrderCapacity");
        hmTagValue.put(583,"ClOrdLinkID");
        hmTagValue.put(584,"MassStatusReqID");
        hmTagValue.put(585,"MassStatusReqType");
        hmTagValue.put(586,"OrigOrdModTime");
        hmTagValue.put(587,"LegSettlType");
        hmTagValue.put(588,"LegSettlDate");
        hmTagValue.put(589,"DayBookingInst");
        hmTagValue.put(590,"BookingUnit");
        hmTagValue.put(591,"PreallocMethod");
        hmTagValue.put(592,"UnderlyingCountryOfIssue");
        hmTagValue.put(593,"UnderlyingStateOrProvinceOfIssue");
        hmTagValue.put(594,"UnderlyingLocaleOfIssue");
        hmTagValue.put(595,"UnderlyingInstrRegistry");
        hmTagValue.put(596,"LegCountryOfIssue");
        hmTagValue.put(597,"LegStateOrProvinceOfIssue");
        hmTagValue.put(598,"LegLocaleOfIssue");
        hmTagValue.put(599,"LegInstrRegistry");
        hmTagValue.put(600,"LegSymbol");
        hmTagValue.put(601,"LegSymbolSfx");
        hmTagValue.put(602,"LegSecurityID");
        hmTagValue.put(603,"LegSecurityIDSource");
        hmTagValue.put(604,"NoLegSecurityAltID");
        hmTagValue.put(605,"LegSecurityAltID");
        hmTagValue.put(606,"LegSecurityAltIDSource");
        hmTagValue.put(607,"LegProduct");
        hmTagValue.put(608,"LegCFICode");
        hmTagValue.put(609,"LegSecurityType");
        hmTagValue.put(610,"LegMaturityMonthYear");
        hmTagValue.put(611,"LegMaturityDate");
        hmTagValue.put(612,"LegStrikePrice");
        hmTagValue.put(613,"LegOptAttribute");
        hmTagValue.put(614,"LegContractMultiplier");
        hmTagValue.put(615,"LegCouponRate");
        hmTagValue.put(616,"LegSecurityExchange");
        hmTagValue.put(617,"LegIssuer");
        hmTagValue.put(618,"EncodedLegIssuerLen");
        hmTagValue.put(619,"EncodedLegIssuer");
        hmTagValue.put(620,"LegSecurityDesc");
        hmTagValue.put(621,"EncodedLegSecurityDescLen");
        hmTagValue.put(622,"EncodedLegSecurityDesc");
        hmTagValue.put(623,"LegRatioQty");
        hmTagValue.put(624,"LegSide");
        hmTagValue.put(625,"TradingSessionSubID");
        hmTagValue.put(626,"AllocType");
        hmTagValue.put(627,"NoHops");
        hmTagValue.put(628,"HopCompID");
        hmTagValue.put(629,"HopSendingTime");
        hmTagValue.put(630,"HopRefID");
        hmTagValue.put(631,"MidPx");
        hmTagValue.put(632,"BidYield");
        hmTagValue.put(633,"MidYield");
        hmTagValue.put(634,"OfferYield");
        hmTagValue.put(635,"ClearingFeeIndicator");
        hmTagValue.put(636,"WorkingIndicator");
        hmTagValue.put(637,"LegLastPx");
        hmTagValue.put(638,"PriorityIndicator");
        hmTagValue.put(639,"PriceImprovement");
        hmTagValue.put(640,"Price2");
        hmTagValue.put(641,"LastForwardPoints2");
        hmTagValue.put(642,"BidForwardPoints2");
        hmTagValue.put(643,"OfferForwardPoints2");
        hmTagValue.put(644,"RFQReqID");
        hmTagValue.put(645,"MktBidPx");
        hmTagValue.put(646,"MktOfferPx");
        hmTagValue.put(647,"MinBidSize");
        hmTagValue.put(648,"MinOfferSize");
        hmTagValue.put(649,"QuoteStatusReqID");
        hmTagValue.put(650,"LegalConfirm");
        hmTagValue.put(651,"UnderlyingLastPx");
        hmTagValue.put(652,"UnderlyingLastQty");
        hmTagValue.put(653,"SecDefStatus (replaced)");
        hmTagValue.put(654,"LegRefID");
        hmTagValue.put(655,"ContraLegRefID");
        hmTagValue.put(656,"SettlCurrBidFxRate");
        hmTagValue.put(657,"SettlCurrOfferFxRate");
        hmTagValue.put(658,"QuoteRequestRejectReason");
        hmTagValue.put(659,"SideComplianceID");
        hmTagValue.put(660,"AcctIDSource");
        hmTagValue.put(661,"AllocAcctIDSource");
        hmTagValue.put(662,"BenchmarkPrice");
        hmTagValue.put(663,"BenchmarkPriceType");
        hmTagValue.put(664,"ConfirmID");
        hmTagValue.put(665,"ConfirmStatus");
        hmTagValue.put(666,"ConfirmTransType");
        hmTagValue.put(667,"ContractSettlMonth");
        hmTagValue.put(668,"DeliveryForm");
        hmTagValue.put(669,"LastParPx");
        hmTagValue.put(670,"NoLegAllocs");
        hmTagValue.put(671,"LegAllocAccount");
        hmTagValue.put(672,"LegIndividualAllocID");
        hmTagValue.put(673,"LegAllocQty");
        hmTagValue.put(674,"LegAllocAcctIDSource");
        hmTagValue.put(675,"LegSettlCurrency");
        hmTagValue.put(676,"LegBenchmarkCurveCurrency");
        hmTagValue.put(677,"LegBenchmarkCurveName");
        hmTagValue.put(678,"LegBenchmarkCurvePoint");
        hmTagValue.put(679,"LegBenchmarkPrice");
        hmTagValue.put(680,"LegBenchmarkPriceType");
        hmTagValue.put(681,"LegBidPx");
        hmTagValue.put(682,"LegIOIQty");
        hmTagValue.put(683,"NoLegStipulations");
        hmTagValue.put(684,"LegOfferPx");
        hmTagValue.put(685,"LegOrderQty");
        hmTagValue.put(686,"LegPriceType");
        hmTagValue.put(687,"LegQty");
        hmTagValue.put(688,"LegStipulationType");
        hmTagValue.put(689,"LegStipulationValue");
        hmTagValue.put(690,"LegSwapType");
        hmTagValue.put(691,"Pool");
        hmTagValue.put(692,"QuotePriceType");
        hmTagValue.put(693,"QuoteRespID");
        hmTagValue.put(694,"QuoteRespType");
        hmTagValue.put(695,"QuoteQualifier");
        hmTagValue.put(696,"YieldRedemptionDate");
        hmTagValue.put(697,"YieldRedemptionPrice");
        hmTagValue.put(698,"YieldRedemptionPriceType");
        hmTagValue.put(699,"BenchmarkSecurityID");
        hmTagValue.put(700,"ReversalIndicator");
        hmTagValue.put(701,"YieldCalcDate");
        hmTagValue.put(702,"NoPositions");
        hmTagValue.put(703,"PosType");
        hmTagValue.put(704,"LongQty");
        hmTagValue.put(705,"ShortQty");
        hmTagValue.put(706,"PosQtyStatus");
        hmTagValue.put(707,"PosAmtType");
        hmTagValue.put(708,"PosAmt");
        hmTagValue.put(709,"PosTransType");
        hmTagValue.put(710,"PosReqID");
        hmTagValue.put(711,"NoUnderlyings");
        hmTagValue.put(712,"PosMaintAction");
        hmTagValue.put(713,"OrigPosReqRefID");
        hmTagValue.put(714,"PosMaintRptRefID");
        hmTagValue.put(715,"ClearingBusinessDate");
        hmTagValue.put(716,"SettlSessID");
        hmTagValue.put(717,"SettlSessSubID");
        hmTagValue.put(718,"AdjustmentType");
        hmTagValue.put(719,"ContraryInstructionIndicator");
        hmTagValue.put(720,"PriorSpreadIndicator");
        hmTagValue.put(721,"PosMaintRptID");
        hmTagValue.put(722,"PosMaintStatus");
        hmTagValue.put(723,"PosMaintResult");
        hmTagValue.put(724,"PosReqType");
        hmTagValue.put(725,"ResponseTransportType");
        hmTagValue.put(726,"ResponseDestination");
        hmTagValue.put(727,"TotalNumPosReports");
        hmTagValue.put(728,"PosReqResult");
        hmTagValue.put(729,"PosReqStatus");
        hmTagValue.put(730,"SettlPrice");
        hmTagValue.put(731,"SettlPriceType");
        hmTagValue.put(732,"UnderlyingSettlPrice");
        hmTagValue.put(733,"UnderlyingSettlPriceType");
        hmTagValue.put(734,"PriorSettlPrice");
        hmTagValue.put(735,"NoQuoteQualifiers");
        hmTagValue.put(736,"AllocSettlCurrency");
        hmTagValue.put(737,"AllocSettlCurrAmt");
        hmTagValue.put(738,"InterestAtMaturity");
        hmTagValue.put(739,"LegDatedDate");
        hmTagValue.put(740,"LegPool");
        hmTagValue.put(741,"AllocInterestAtMaturity");
        hmTagValue.put(742,"AllocAccruedInterestAmt");
        hmTagValue.put(743,"DeliveryDate");
        hmTagValue.put(744,"AssignmentMethod");
        hmTagValue.put(745,"AssignmentUnit");
        hmTagValue.put(746,"OpenInterest");
        hmTagValue.put(747,"ExerciseMethod");
        hmTagValue.put(748,"TotNumTradeReports");
        hmTagValue.put(749,"TradeRequestResult");
        hmTagValue.put(750,"TradeRequestStatus");
        hmTagValue.put(751,"TradeReportRejectReason");
        hmTagValue.put(752,"SideMultiLegReportingType");
        hmTagValue.put(753,"NoPosAmt");
        hmTagValue.put(754,"AutoAcceptIndicator");
        hmTagValue.put(755,"AllocReportID");
        hmTagValue.put(756,"NoNested2PartyIDs");
        hmTagValue.put(757,"Nested2PartyID");
        hmTagValue.put(758,"Nested2PartyIDSource");
        hmTagValue.put(759,"Nested2PartyRole");
        hmTagValue.put(760,"Nested2PartySubID");
        hmTagValue.put(761,"BenchmarkSecurityIDSource");
        hmTagValue.put(762,"SecuritySubType");
        hmTagValue.put(763,"UnderlyingSecuritySubType");
        hmTagValue.put(764,"LegSecuritySubType");
        hmTagValue.put(765,"AllowableOneSidednessPct");
        hmTagValue.put(766,"AllowableOneSidednessValue");
        hmTagValue.put(767,"AllowableOneSidednessCurr");
        hmTagValue.put(768,"NoTrdRegTimestamps");
        hmTagValue.put(769,"TrdRegTimestamp");
        hmTagValue.put(770,"TrdRegTimestampType");
        hmTagValue.put(771,"TrdRegTimestampOrigin");
        hmTagValue.put(772,"ConfirmRefID");
        hmTagValue.put(773,"ConfirmType");
        hmTagValue.put(774,"ConfirmRejReason");
        hmTagValue.put(775,"BookingType");
        hmTagValue.put(776,"IndividualAllocRejCode");
        hmTagValue.put(777,"SettlInstMsgID");
        hmTagValue.put(778,"NoSettlInst");
        hmTagValue.put(779,"LastUpdateTime");
        hmTagValue.put(780,"AllocSettlInstType");
        hmTagValue.put(781,"NoSettlPartyIDs");
        hmTagValue.put(782,"SettlPartyID");
        hmTagValue.put(783,"SettlPartyIDSource");
        hmTagValue.put(784,"SettlPartyRole");
        hmTagValue.put(785,"SettlPartySubID");
        hmTagValue.put(786,"SettlPartySubIDType");
        hmTagValue.put(787,"DlvyInstType");
        hmTagValue.put(788,"TerminationType");
        hmTagValue.put(789,"NextExpectedMsgSeqNum");
        hmTagValue.put(790,"OrdStatusReqID");
        hmTagValue.put(791,"SettlInstReqID");
        hmTagValue.put(792,"SettlInstReqRejCode");
        hmTagValue.put(793,"SecondaryAllocID");
        hmTagValue.put(794,"AllocReportType");
        hmTagValue.put(795,"AllocReportRefID");
        hmTagValue.put(796,"AllocCancReplaceReason");
        hmTagValue.put(797,"CopyMsgIndicator");
        hmTagValue.put(798,"AllocAccountType");
        hmTagValue.put(799,"OrderAvgPx");
        hmTagValue.put(800,"OrderBookingQty");
        hmTagValue.put(801,"NoSettlPartySubIDs");
        hmTagValue.put(802,"NoPartySubIDs");
        hmTagValue.put(803,"PartySubIDType");
        hmTagValue.put(804,"NoNestedPartySubIDs");
        hmTagValue.put(805,"NestedPartySubIDType");
        hmTagValue.put(806,"NoNested2PartySubIDs");
        hmTagValue.put(807,"Nested2PartySubIDType");
        hmTagValue.put(808,"AllocIntermedReqType");
        hmTagValue.put(810,"UnderlyingPx");
        hmTagValue.put(811,"PriceDelta");
        hmTagValue.put(812,"ApplQueueMax");
        hmTagValue.put(813,"ApplQueueDepth");
        hmTagValue.put(814,"ApplQueueResolution");
        hmTagValue.put(815,"ApplQueueAction");
        hmTagValue.put(816,"NoAltMDSource");
        hmTagValue.put(817,"AltMDSourceID");
        hmTagValue.put(818,"SecondaryTradeReportID");
        hmTagValue.put(819,"AvgPxIndicator");
        hmTagValue.put(820,"TradeLinkID");
        hmTagValue.put(821,"OrderInputDevice");
        hmTagValue.put(822,"UnderlyingTradingSessionID");
        hmTagValue.put(823,"UnderlyingTradingSessionSubID");
        hmTagValue.put(824,"TradeLegRefID");
        hmTagValue.put(825,"ExchangeRule");
        hmTagValue.put(826,"TradeAllocIndicator");
        hmTagValue.put(827,"ExpirationCycle");
        hmTagValue.put(828,"TrdType");
        hmTagValue.put(829,"TrdSubType");
        hmTagValue.put(830,"TransferReason");
        hmTagValue.put(831,"AsgnReqID");
        hmTagValue.put(832,"TotNumAssignmentReports");
        hmTagValue.put(833,"AsgnRptID");
        hmTagValue.put(834,"ThresholdAmount");
        hmTagValue.put(835,"PegMoveType");
        hmTagValue.put(836,"PegOffsetType");
        hmTagValue.put(837,"PegLimitType");
        hmTagValue.put(838,"PegRoundDirection");
        hmTagValue.put(839,"PeggedPrice");
        hmTagValue.put(840,"PegScope");
        hmTagValue.put(841,"DiscretionMoveType");
        hmTagValue.put(842,"DiscretionOffsetType");
        hmTagValue.put(843,"DiscretionLimitType");
        hmTagValue.put(844,"DiscretionRoundDirection");
        hmTagValue.put(845,"DiscretionPrice");
        hmTagValue.put(846,"DiscretionScope");
        hmTagValue.put(847,"TargetStrategy");
        hmTagValue.put(848,"TargetStrategyParameters");
        hmTagValue.put(849,"ParticipationRate");
        hmTagValue.put(850,"TargetStrategyPerformance");
        hmTagValue.put(851,"LastLiquidityInd");
        hmTagValue.put(852,"PublishTrdIndicator");
        hmTagValue.put(853,"ShortSaleReason");
        hmTagValue.put(854,"QtyType");
        hmTagValue.put(855,"SecondaryTrdType");
        hmTagValue.put(856,"TradeReportType");
        hmTagValue.put(857,"AllocNoOrdersType");
        hmTagValue.put(858,"SharedCommission");
        hmTagValue.put(859,"ConfirmReqID");
        hmTagValue.put(860,"AvgParPx");
        hmTagValue.put(861,"ReportedPx");
        hmTagValue.put(862,"NoCapacities");
        hmTagValue.put(863,"OrderCapacityQty");
        hmTagValue.put(864,"NoEvents");
        hmTagValue.put(865,"EventType");
        hmTagValue.put(866,"EventDate");
        hmTagValue.put(867,"EventPx");
        hmTagValue.put(868,"EventText");
        hmTagValue.put(869,"PctAtRisk");
        hmTagValue.put(870,"NoInstrAttrib");
        hmTagValue.put(871,"InstrAttribType");
        hmTagValue.put(872,"InstrAttribValue");
        hmTagValue.put(873,"DatedDate");
        hmTagValue.put(874,"InterestAccrualDate");
        hmTagValue.put(875,"CPProgram");
        hmTagValue.put(876,"CPRegType");
        hmTagValue.put(877,"UnderlyingCPProgram");
        hmTagValue.put(878,"UnderlyingCPRegType");
        hmTagValue.put(879,"UnderlyingQty");
        hmTagValue.put(880,"TrdMatchID");
        hmTagValue.put(881,"SecondaryTradeReportRefID");
        hmTagValue.put(882,"UnderlyingDirtyPrice");
        hmTagValue.put(883,"UnderlyingEndPrice");
        hmTagValue.put(884,"UnderlyingStartValue");
        hmTagValue.put(885,"UnderlyingCurrentValue");
        hmTagValue.put(886,"UnderlyingEndValue");
        hmTagValue.put(887,"NoUnderlyingStips");
        hmTagValue.put(888,"UnderlyingStipType");
        hmTagValue.put(889,"UnderlyingStipValue");
        hmTagValue.put(890,"MaturityNetMoney");
        hmTagValue.put(891,"MiscFeeBasis");
        hmTagValue.put(892,"TotNoAllocs");
        hmTagValue.put(893,"LastFragment");
        hmTagValue.put(894,"CollReqID");
        hmTagValue.put(895,"CollAsgnReason");
        hmTagValue.put(896,"CollInquiryQualifier");
        hmTagValue.put(897,"NoTrades");
        hmTagValue.put(898,"MarginRatio");
        hmTagValue.put(899,"MarginExcess");
        hmTagValue.put(900,"TotalNetValue");
        hmTagValue.put(901,"CashOutstanding");
        hmTagValue.put(902,"CollAsgnID");
        hmTagValue.put(903,"CollAsgnTransType");
        hmTagValue.put(904,"CollRespID");
        hmTagValue.put(905,"CollAsgnRespType");
        hmTagValue.put(906,"CollAsgnRejectReason");
        hmTagValue.put(907,"CollAsgnRefID");
        hmTagValue.put(908,"CollRptID");
        hmTagValue.put(909,"CollInquiryID");
        hmTagValue.put(910,"CollStatus");
        hmTagValue.put(911,"TotNumReports");
        hmTagValue.put(912,"LastRptRequested");
        hmTagValue.put(913,"AgreementDesc");
        hmTagValue.put(914,"AgreementID");
        hmTagValue.put(915,"AgreementDate");
        hmTagValue.put(916,"StartDate");
        hmTagValue.put(917,"EndDate");
        hmTagValue.put(918,"AgreementCurrency");
        hmTagValue.put(919,"DeliveryType");
        hmTagValue.put(920,"EndAccruedInterestAmt");
        hmTagValue.put(921,"StartCash");
        hmTagValue.put(922,"EndCash");
        hmTagValue.put(923,"UserRequestID");
        hmTagValue.put(924,"UserRequestType");
        hmTagValue.put(925,"NewPassword");
        hmTagValue.put(926,"UserStatus");
        hmTagValue.put(927,"UserStatusText");
        hmTagValue.put(928,"StatusValue");
        hmTagValue.put(929,"StatusText");
        hmTagValue.put(930,"RefCompID");
        hmTagValue.put(931,"RefSubID");
        hmTagValue.put(932,"NetworkResponseID");
        hmTagValue.put(933,"NetworkRequestID");
        hmTagValue.put(934,"LastNetworkResponseID");
        hmTagValue.put(935,"NetworkRequestType");
        hmTagValue.put(936,"NoCompIDs");
        hmTagValue.put(937,"NetworkStatusResponseType");
        hmTagValue.put(938,"NoCollInquiryQualifier");
        hmTagValue.put(939,"TrdRptStatus");
        hmTagValue.put(940,"AffirmStatus");
        hmTagValue.put(941,"UnderlyingStrikeCurrency");
        hmTagValue.put(942,"LegStrikeCurrency");
        hmTagValue.put(943,"TimeBracket");
        hmTagValue.put(944,"CollAction");
        hmTagValue.put(945,"CollInquiryStatus");
        hmTagValue.put(946,"CollInquiryResult");
        hmTagValue.put(947,"StrikeCurrency");
        hmTagValue.put(948,"NoNested3PartyIDs");
        hmTagValue.put(949,"Nested3PartyID");
        hmTagValue.put(950,"Nested3PartyIDSource");
        hmTagValue.put(951,"Nested3PartyRole");
        hmTagValue.put(952,"NoNested3PartySubIDs");
        hmTagValue.put(953,"Nested3PartySubID");
        hmTagValue.put(954,"Nested3PartySubIDType");
        hmTagValue.put(955,"LegContractSettlMonth");
        hmTagValue.put(956,"LegInterestAccrualDate");
    }

    static {
        hmFixVersions = new HashMap<>();
        hmFixVersions.put(FIX_4_0, "FIX40.xml");
        hmFixVersions.put(FIX_4_1, "FIX41.xml");
        hmFixVersions.put(FIX_4_2, "FIX42.xml");
        hmFixVersions.put(FIX_4_3, "FIX43.xml");
        hmFixVersions.put(FIX_4_4, "FIX44.xml");
        hmFixVersions.put(FIX_5_0, "FIX50.xml");
    }

    static{
//        hmTags = new HashMap<>();
//        hmTags.put("1", "Account");
//        hmTags.put("6", "AvgPx");
//        hmTags.put("8", "BeginString");
//        hmTags.put("9", "BodyLength");
//        hmTags.put("10", "CheckSum");
//        hmTags.put("11", "ClOrdID");
//        hmTags.put("14", "CumQty");
//        hmTags.put("17", "ExecID");
//        hmTags.put("31", "LastPx");
//        hmTags.put("37", "OrderID");
//        hmTags.put("34", "MsgSeqNum");
//        hmTags.put(MSG_TYPE, "MsgType");
//        hmTags.put("36", "NewSeqNo");
//        hmTags.put("38", "OrderQty");
//        hmTags.put("39", "OrdStatus");
//        hmTags.put("40", "OrdType");
//        hmTags.put("41", "OrigClOrdID");
//        hmTags.put("44", "Price");
//        hmTags.put("49", "SenderCompID");
//        hmTags.put("52", "SendingTime");
//        hmTags.put("54", "Side");
//        hmTags.put("55", "Symbol");
//        hmTags.put("56", " TargetCompID");
//        hmTags.put("58", " Text");
//        hmTags.put("60", " TransactTime");
//        hmTags.put("150", "ExecType");
//        hmTags.put("151", "LeavesQty");
//        hmTags.put("192", "OrderQty2");
//        hmTags.put("354", "EncodedTextLen");

    }

    static {
        hmMsgType = new HashMap<>();
        hmMsgType.put("0", "HEARTBEAT");
        hmMsgType.put("1", "TEST REQUEST");
        hmMsgType.put("2", "RESEND REQUEST");
        hmMsgType.put("3", "REJECT");
        hmMsgType.put("4", "SEQUENCE RESET");
        hmMsgType.put("5", "LOGOUT");
        hmMsgType.put("6", "INDICATION OF INTEREST");
        hmMsgType.put("7", "ADVERTISEMENT");
        hmMsgType.put(EXECUTION_REPORT, "EXECUTION REPORT");
        hmMsgType.put("9", "ORDER CANCEL REJECT");
        hmMsgType.put("A", "LOGON");
        hmMsgType.put("B", "NEWS");
        hmMsgType.put("C", "EMAIL");
        hmMsgType.put("D", "NEW ORDER SINGLE");
        hmMsgType.put("E", "NEW ORDER LIST");
        hmMsgType.put("F", "ORDER CANCEL REQUEST");
        hmMsgType.put("G", "ORDER CANCEL/REPLACE REQUEST");
    }

    static {
        hmOrdStatus = new HashMap<>();
        hmOrdStatus.put("0", "NEW");
        hmOrdStatus.put("1", "PARTIALLY FILLED");
        hmOrdStatus.put("2", "FILLED");
        hmOrdStatus.put("3", "DONE FOR DAY");
        hmOrdStatus.put("4", "CANCELED");
        hmOrdStatus.put("5", "");//removed in FIX 44
        hmOrdStatus.put("6", "PENDING CANCEL");
        hmOrdStatus.put("7", "STOPPED");
        hmOrdStatus.put("8", "REJECTED");
        hmOrdStatus.put("9", "SUSPENDED");
        hmOrdStatus.put("A", "PENDING NEW");
        hmOrdStatus.put("B", "CALCULATED");
        hmOrdStatus.put("C", "EXPIRED");
        hmOrdStatus.put("D", "ACCEPTED FOR BIDDING");
        hmOrdStatus.put("E", "PENDING REPLACE");
    }

    static {
        hmExecType = new HashMap<>();
        hmExecType.put("0", "NEW");
        hmExecType.put("3", "DONE FOR DAY");
        hmExecType.put("4", "CANCELED");
        hmExecType.put("5", "REPLACE");
        hmExecType.put("6", "PENDING CANCEL");
        hmExecType.put("7", "STOPPED");
        hmExecType.put("8", "REJECTED");
        hmExecType.put("9", "SUSPENDED");
        hmExecType.put("A", "PENDING NEW");
        hmExecType.put("B", "CALCULATED");
        hmExecType.put("C", "EXPIRED");
        hmExecType.put("D", "RESTARTED");
        hmExecType.put("E", "PENDING REPLACE");
        hmExecType.put("F", "TRADE");
        hmExecType.put("G", "TRADE CORRECT");
        hmExecType.put("H", "TRADE CANCEL");
        hmExecType.put("I", "ORDER STATUS");
    }

    static{
        defaultTags = new ArrayList<>();
        defaultTags.add(new Tag(Utils.getKeyFromValue(Constants.CONF_BEGIN_STRING), Constants.CONF_BEGIN_STRING, getConfig(Constants.INITIATOR_ROLE, Constants.CONF_BEGIN_STRING)));
        defaultTags.add(new Tag(Utils.getKeyFromValue(Constants.CONF_SENDER), Constants.CONF_SENDER, getConfig(Constants.INITIATOR_ROLE, Constants.CONF_SENDER)));
        defaultTags.add(new Tag(Utils.getKeyFromValue(Constants.CONF_TARGET), Constants.CONF_TARGET, getConfig(Constants.INITIATOR_ROLE, Constants.CONF_TARGET)));
        defaultTags.add(new Tag(Utils.getKeyFromValue(Constants.CONF_HEART_BT_INT), Constants.CONF_HEART_BT_INT, getConfig(Constants.INITIATOR_ROLE, Constants.CONF_HEART_BT_INT)));
        defaultTags.add(new Tag(Utils.getKeyFromValue("MsgType"), "MsgType", "D"));
        defaultTags.add(new Tag(Utils.getKeyFromValue("MsgSeqNum"), "MsgSeqNum", "0"));
        defaultTags.add(new Tag(Utils.getKeyFromValue("SendingTime"), "SendingTime", LocalDateTime.now().toString()));
        defaultTags.add(new Tag(Utils.getKeyFromValue("EncryptMethod"), "EncryptMethod", "0"));


//        int dataDic = Utils.getComboConfigValue(Constants.INITIATOR_ROLE, Constants.CONF_DATA_DIC);
//        int resetOnLogon = Utils.getComboConfigValue(Constants.INITIATOR_ROLE, Constants.CONF_RESET_ON_LOGON);
//        int resetOnLogout = Utils.getComboConfigValue(Constants.INITIATOR_ROLE, Constants.CONF_RESET_ON_LOGOUT);
//        int resetOnDisconnect = Utils.getComboConfigValue(Constants.INITIATOR_ROLE, Constants.CONF_RESET_ON_DISCONNECT);
//        defaultTags.add(new Tag(Utils.getKeyFromValue(Constants.INI_CONNECT_HOST), Constants.INI_CONNECT_HOST, getConfig(Constants.INITIATOR_ROLE,Constants.INI_CONNECT_HOST)));
//        defaultTags.add(new Tag(Utils.getKeyFromValue(Constants.INI_CONNECT_PORT), Constants.INI_CONNECT_PORT, getConfig(Constants.INITIATOR_ROLE,Constants.INI_CONNECT_PORT)));
//        defaultTags.add(new Tag(Utils.getKeyFromValue(Constants.CONF_FILE_STORE_PATH), Constants.CONF_FILE_STORE_PATH, getConfig(Constants.INITIATOR_ROLE, Constants.CONF_FILE_STORE_PATH)));
//        defaultTags.add(new Tag(Utils.getKeyFromValue(Constants.CONF_FILE_LOG_PATH), Constants.CONF_FILE_LOG_PATH, getConfig(Constants.INITIATOR_ROLE, Constants.CONF_FILE_LOG_PATH)));
//        defaultTags.add(new Tag(Utils.getKeyFromValue(Constants.CONF_START_TIME), Constants.CONF_START_TIME, getConfig(Constants.INITIATOR_ROLE, Constants.CONF_START_TIME)));
//        defaultTags.add(new Tag(Utils.getKeyFromValue(Constants.CONF_END_TIME), Constants.CONF_END_TIME, getConfig(Constants.INITIATOR_ROLE, Constants.CONF_END_TIME)));
//        defaultTags.add(new Tag(Utils.getKeyFromValue(Constants.CONF_USE_DATA_DIC), Constants.CONF_USE_DATA_DIC, dataDic == 0 ? Y: N));
//        defaultTags.add(new Tag(Utils.getKeyFromValue(Constants.CONF_RESET_ON_LOGON), Constants.CONF_RESET_ON_LOGON, resetOnLogon == 0 ? Y: N));
//        defaultTags.add(new Tag(Utils.getKeyFromValue(Constants.CONF_RESET_ON_LOGOUT), Constants.CONF_RESET_ON_LOGOUT, resetOnLogout == 0 ? Y: N));
//        defaultTags.add(new Tag(Utils.getKeyFromValue(Constants.CONF_RESET_ON_DISCONNECT), Constants.CONF_RESET_ON_DISCONNECT, resetOnDisconnect == 0 ? Y: N));
    }
}
